import numpy as np
def solution(image_matrix, min_compression_rate):
    compressed_matrix = np.array([])
    m,n=image_matrix.shape
    k=int(np.ceil(m*n/min_compression_rate/(m+n+1)))
    u,s,vh=np.linalg.svd(image_matrix)
    compressed_matrix=u[:,:k].dot(np.diag(s)[:k,:k]).dot(vh[:k,:])
    return compressed_matrix
  
# You should only complete the above function

def input_a_matrix():
    # nrow = [int(ele) for ele in input().split()][0]
    row_list = []
    while True:
        arow = [float(ele) for ele in input().split()]
        if len(arow) == 0:
            break
        row_list.append(arow)
    
    a_matrix = np.array(row_list)
    return a_matrix

min_compression_rate = float(input().strip())
image_matrix = input_a_matrix()

compressed = solution(image_matrix, min_compression_rate)
for row in compressed:
    row = ["%.3f" % (ele) for ele in row]
    print(*row, sep=' ')
print()

